{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport vuetify from './plugins/vuetify';\nimport VueTheMask from 'vue-the-mask';\nimport axios from 'axios';\n\n// Configurações iniciais do Axios\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.baseURL = 'http://127.0.0.1:8000';\naxios.defaults.withCredentials = true;\n\n// Obtendo o CSRF token do backend\naxios.get('/csrf-cookie').then(response => {\n  console.log('CSRF token has been set.');\n\n  // Configurar o token CSRF para todas as requisições após obtê-lo\n  axios.interceptors.request.use(config => {\n    const csrfToken = document.cookie.split('; ').find(row => row.startsWith('XSRF-TOKEN='));\n    if (csrfToken) {\n      config.headers['X-CSRF-TOKEN'] = decodeURIComponent(csrfToken.split('=')[1]);\n    }\n    return config;\n  });\n\n  // Criar e montar a aplicação Vue\n  const app = createApp(App);\n  app.use(router);\n  app.use(vuetify);\n  app.use(VueTheMask);\n  app.mount('#app');\n}).catch(error => {\n  console.error('Error fetching CSRF token:', error);\n});","map":{"version":3,"names":["createApp","App","router","vuetify","VueTheMask","axios","defaults","headers","common","post","baseURL","withCredentials","get","then","response","console","log","interceptors","request","use","config","csrfToken","document","cookie","split","find","row","startsWith","decodeURIComponent","app","mount","catch","error"],"sources":["C:/Users/Davi/PRODEMGE1/frontend/src/main.js"],"sourcesContent":["import { createApp } from 'vue';\r\nimport App from './App.vue';\r\nimport router from './router';\r\nimport vuetify from './plugins/vuetify';\r\nimport VueTheMask from 'vue-the-mask';\r\nimport axios from 'axios';\r\n\r\n// Configurações iniciais do Axios\r\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\naxios.defaults.baseURL = 'http://127.0.0.1:8000';\r\naxios.defaults.withCredentials = true;\r\n\r\n// Obtendo o CSRF token do backend\r\naxios.get('/csrf-cookie').then(response => {\r\n    console.log('CSRF token has been set.');\r\n\r\n    // Configurar o token CSRF para todas as requisições após obtê-lo\r\n    axios.interceptors.request.use(config => {\r\n        const csrfToken = document.cookie.split('; ').find(row => row.startsWith('XSRF-TOKEN='));\r\n        if (csrfToken) {\r\n            config.headers['X-CSRF-TOKEN'] = decodeURIComponent(csrfToken.split('=')[1]);\r\n        }\r\n        return config;\r\n    });\r\n\r\n    // Criar e montar a aplicação Vue\r\n    const app = createApp(App);\r\n    app.use(router);\r\n    app.use(vuetify);\r\n    app.use(VueTheMask);\r\n    app.mount('#app');\r\n}).catch(error => {\r\n    console.error('Error fetching CSRF token:', error);\r\n});\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,kBAAkB,CAAC,GAAG,gBAAgB;AACpEH,KAAK,CAACC,QAAQ,CAACC,OAAO,CAACE,IAAI,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAChEJ,KAAK,CAACC,QAAQ,CAACI,OAAO,GAAG,uBAAuB;AAChDL,KAAK,CAACC,QAAQ,CAACK,eAAe,GAAG,IAAI;;AAErC;AACAN,KAAK,CAACO,GAAG,CAAC,cAAc,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;EACvCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;EAEvC;EACAX,KAAK,CAACY,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;IACrC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,aAAa,CAAC,CAAC;IACxF,IAAIN,SAAS,EAAE;MACXD,MAAM,CAACb,OAAO,CAAC,cAAc,CAAC,GAAGqB,kBAAkB,CAACP,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF;IACA,OAAOJ,MAAM;EACjB,CAAC,CAAC;;EAEF;EACA,MAAMS,GAAG,GAAG7B,SAAS,CAACC,GAAG,CAAC;EAC1B4B,GAAG,CAACV,GAAG,CAACjB,MAAM,CAAC;EACf2B,GAAG,CAACV,GAAG,CAAChB,OAAO,CAAC;EAChB0B,GAAG,CAACV,GAAG,CAACf,UAAU,CAAC;EACnByB,GAAG,CAACC,KAAK,CAAC,MAAM,CAAC;AACrB,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;EACdjB,OAAO,CAACiB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;AACtD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}