{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\");\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_alert = _resolveComponent(\"v-alert\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [$data.person ? (_openBlock(), _createBlock(_component_v_card, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($data.person.name), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_subtitle, null, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($data.person.cpf), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_text, null, {\n        default: _withCtx(() => [_createVNode(_component_v_list, null, {\n          default: _withCtx(() => [_createVNode(_component_v_list_item, null, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n              default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n                default: _withCtx(() => [_createTextVNode(\"Email\")]),\n                _: 1 /* STABLE */\n              }), _createVNode(_component_v_list_item_subtitle, null, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString($data.person.email), 1 /* TEXT */)]),\n                _: 1 /* STABLE */\n              })]),\n              _: 1 /* STABLE */\n            })]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_list_item, null, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n              default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n                default: _withCtx(() => [_createTextVNode(\"Telefone\")]),\n                _: 1 /* STABLE */\n              }), _createVNode(_component_v_list_item_subtitle, null, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString($data.person.phone), 1 /* TEXT */)]),\n                _: 1 /* STABLE */\n              })]),\n              _: 1 /* STABLE */\n            })]),\n            _: 1 /* STABLE */\n          }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.person.addresses, address => {\n            return _openBlock(), _createBlock(_component_v_list_item, {\n              key: address.id\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n                default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n                  default: _withCtx(() => [_createTextVNode(_toDisplayString($options.capitalize(address.type)), 1 /* TEXT */)]),\n                  _: 2 /* DYNAMIC */\n                }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, null, {\n                  default: _withCtx(() => [_createTextVNode(_toDisplayString($options.formatAddress(address)), 1 /* TEXT */)]),\n                  _: 2 /* DYNAMIC */\n                }, 1024 /* DYNAMIC_SLOTS */)]),\n                _: 2 /* DYNAMIC */\n              }, 1024 /* DYNAMIC_SLOTS */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */);\n          }), 128 /* KEYED_FRAGMENT */))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })) : (_openBlock(), _createBlock(_component_v_alert, {\n      key: 1,\n      type: \"error\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Detalhes da pessoa não estão disponíveis.\")]),\n      _: 1 /* STABLE */\n    }))]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_container","default","_withCtx","$data","person","_component_v_card","key","_createVNode","_component_v_card_title","_createTextVNode","_toDisplayString","name","_","_component_v_card_subtitle","cpf","_component_v_card_text","_component_v_list","_component_v_list_item","_component_v_list_item_content","_component_v_list_item_title","_component_v_list_item_subtitle","email","phone","_createElementBlock","_Fragment","_renderList","addresses","address","id","$options","capitalize","type","formatAddress","_component_v_alert"],"sources":["C:\\Users\\Davi\\PRODEMGE1\\frontend\\src\\components\\DetailPage.vue"],"sourcesContent":["<template>\r\n    <v-container>\r\n      <v-card v-if=\"person\">\r\n        <v-card-title>{{ person.name }}</v-card-title>\r\n        <v-card-subtitle>{{ person.cpf }}</v-card-subtitle>\r\n        <v-card-text>\r\n          <v-list>\r\n            <v-list-item>\r\n              <v-list-item-content>\r\n                <v-list-item-title>Email</v-list-item-title>\r\n                <v-list-item-subtitle>{{ person.email }}</v-list-item-subtitle>\r\n              </v-list-item-content>\r\n            </v-list-item>\r\n            <v-list-item>\r\n              <v-list-item-content>\r\n                <v-list-item-title>Telefone</v-list-item-title>\r\n                <v-list-item-subtitle>{{ person.phone }}</v-list-item-subtitle>\r\n              </v-list-item-content>\r\n            </v-list-item>\r\n            <v-list-item v-for=\"address in person.addresses\" :key=\"address.id\">\r\n              <v-list-item-content>\r\n                <v-list-item-title>{{ capitalize(address.type) }}</v-list-item-title>\r\n                <v-list-item-subtitle>{{ formatAddress(address) }}</v-list-item-subtitle>\r\n              </v-list-item-content>\r\n            </v-list-item>\r\n          </v-list>\r\n        </v-card-text>\r\n      </v-card>\r\n      <v-alert v-else type=\"error\">Detalhes da pessoa não estão disponíveis.</v-alert>\r\n    </v-container>\r\n  </template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      person: null,\r\n    };\r\n  },\r\n  methods: {\r\n    fetchPersonDetails() {\r\n      axios.get(`/registrations/${this.$route.params.id}`)\r\n        .then(response => {\r\n          this.person = response.data.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Erro ao buscar detalhes da pessoa:', error);\r\n        });\r\n    },\r\n    formatAddress(address) {\r\n      return `${address.street}, ${address.number}${address.complement ? ', ' + address.complement : ''} - ${address.neighborhood}, ${address.city} - ${address.state}`;\r\n    },\r\n    capitalize(value) {\r\n      if (!value) return '';\r\n      value = value.toString();\r\n      return value.charAt(0).toUpperCase() + value.slice(1);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchPersonDetails();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Estilos adicionais, se necessário */\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}